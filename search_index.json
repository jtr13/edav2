[["index.html", "edav.info, 2nd edition Chapter 1 Welcome!", " edav.info, 2nd edition Joyce Robbins 2022-01-30 Chapter 1 Welcome! This is the brand new start of edav.info 2.0! The first version of edav.info is still available, but will no longer be updated. With this resource, we try to give you a curated collection of tools and references that will make it easier to learn how to work with data in R. Detailed Examples will also be used to show proper exploratory data analysis under different circumstances. This resource is specifically tailored to the GR5293 Statistical Graphics and GR5702 Exploratory Data Analysis and Visualization courses offered at Columbia University. However, we hope that anyone interested in working with data in R will benefit from these pages. Happy coding! (Note. edav.info 2.0 is still under construction, and we will try our best to update new chapters weekly so that it will be up-to-date with the information you need to complete the current problem set.) "],["learning-r.html", "Chapter 2 Learning R 2.1 Getting started 2.2 Troubleshooting 2.3 Tips &amp; Tricks", " Chapter 2 Learning R This is a page working in progress :) 2.1 Getting started Welcome to the world of EDAV! As you have already known, we will mainly use R through out the course. In an effort to get everyone on the same page, here is a checklist of essentials so you can get up and running. The best resources are scattered in different places online, so bear with links to various sites depending on the topic. 2.1.1 Top 10 Essentials Checklist (r4ds = R for Data Science by Garrett Grolemund and Hadley Wickham, free online) Install R (r4ds) – You need to have this installed but you won’t open the application since you’ll be working in RStudio. If you already installed R, make sure you’re current! The latest version of R (as of 2022-01-18) is R 4.1.2 “Bird Hippie” released on 2021/11/01. Install RStudio (r4ds) – Download the free, Desktop version for your OS. Working in this IDE will make working in R much more enjoyable. As with R, stay current. RStudio is constantly adding new features. The latest version (as of 2022-01-18) is RStudio 2021.09.2+382 (“Ghost Orchid”) release notes. Get comfortable with RStudio – In this chapter of Bruno Rodriguez’s Modern R with the Tidyverse, you’ll learn about panes, options, getting help, keyboard shortcuts, projects, add-ins, and packages. Be sure to try out: Do some math in the console Create an R Markdown file (.Rmd) and render it to .html Install some packages like tidyverse or MASS Another great option for learning the IDE: Watch Writing Code in RStudio (RStudio webinar) Learn “R Nuts and Bolts” – Roger Peng’s chapter in R Programming will give you a solid foundation in the basic building blocks of R. It’s worth making the investing in understanding how R objects work now so they don’t cause you problems later. Focus on vectors and especially data frames; matrices and lists don’t come up often in data visualization. Get familiar with R classes: integer, numeric, character, and logical. Understand how factors work; they are very important for graphing. Tidy up (r4ds) – Install the tidyverse, and get familiar with what it is. We will discuss differences between base R and the tidyverse in class. Learn ggplot2 basics (r4ds) – In class we will study the grammar of graphics on which ggplot2 is based, but it will help to familiarize yourself with the syntax in advance. Avail yourself of the “Data Visualization with ggplot2” cheatsheet by clicking “Help” “Cheatsheets…” within RStudio. Learn some RMarkdown – For this class you will write assignments in R Markdown (stored as .Rmd files) and then render them into pdfs for submission. You can jump right in and open a new R Markdown file (File &gt; New File &gt; R Markdown…), and leave the Default Output Format as HTML. You will get a R Markdown template you can tinker with. Click the “knit” button and see what happens. For more detail, watch the RStudio webinar Getting Started with R Markdown Use RStudio projects (r4ds) – If you haven’t already, drink the Kool-Aid. Make each problem set a separate project. You will never have to worry about getwd() or setwd() again because everything will just be in the right places. Or watch the webinar: “Projects in RStudio” Learn the basic dplyr verbs for data manipulation (r4ds) – Concentrate on the main verbs: filter() (rows), select() (columns), mutate(), arrange() (rows), group_by(), and summarize(). Learn the pipe %&gt;% operator. Know how to tidy your data – The pivot_longer() function from the tidyr package – successor to gather() – will help you get your data in the right form for plotting. More on this in class. Check out these super cool animations, which follow a data frame as it is transformed by tidyr functions. 2.2 Troubleshooting 2.2.1 Document doesn’t knit Normally an error message will display in the R Markdown section pointing to some lines with specific reasons. Try Googling as your first option and if not finding a solution, leave a post on ed discussion. 2.2.2 Functions stop working Strange behavior from functions that previously worked are often caused by function conflicts. This can happen if you have two packages loaded with the same function names. To indicate the proper package, namespace it. Conflicts commonly occur with select and filter and map. If you intend the tidyverse ones use: dplyr::select, dplyr::filter and purrr::map. Some other culprits: dplyr::summarise() and vcdExtra::summarise() ggmosaic::mosaic() and vcd::mosaic() leaflet::addLegend() and xts::addLegend() dplyr::select and MASS::select 2.3 Tips &amp; Tricks 2.3.1 knitr Upon creating a new R markdown file, you should always notice a section like this: {r setup, include=False} knitr::opts_chunk$set(echo = TRUE) The chunk options refer to the first line and you can add some of the following options: {r setup, include=False, warning=False, message=False, cache=True} knitr::opts_chunk$set(echo = TRUE) warning=FALSE - Suppress warnings message=FALSE – Suppress messages, especially useful when loading packages cache=TRUE – only changed chunks will be evaluated, be careful though since changes in dependencies will not be detected. 2.3.2 Sizing figures Always use chunk options to size figures. You can set a default size in the YAML at the beginning of the .Rmd file as so: output: pdf_document: fig_height: 3 fig_width: 5 Another method is to click the gear ⚙️ next to the Knit button, then Output Options…, and finally the Figures tab. Then as needed override one or more defaults in particular chunks: {r, fig.width=4, fig.height=2} Figure related chunk options include fig.width, fig.height, fig.asp, and fig.align; there are many more. 2.3.3 R studio keyborad shortcuts Insert R chunk - option-command-i (Mac) - ctrl+alt+I (Windows) ```{r} ``` Insert %&gt;% (“the pipe”): shift-command-M (Mac) - ctrl+shift+M (Windows) Comment/Uncomment lines: shift-command-C (Mac) - ctrl-shift+C (Windows) Knit Document: shift-command-K (Mac) - ctrl-shift+K (Windows) For more shortcuts refer here 2.3.4 Viewing plots in plot window Would you like your plots to appear in the plot window instead of below each chunk in the .Rmd file? Click ⚙️ and then Chunk Output in Console. 2.3.5 Adding figures and links Add images ![DESCRIPTION HERE](PATH HERE) Add links: The text in the content column will act as a hyperlink [CONTENT HERE](LINK HERE) Note: Do not use these in r chunks as they will not work. "],["learning-ggplot2.html", "Chapter 3 Learning ggplot2 3.1 Getting Started 3.2 Default Part: Layer 3.3 Customized Parts 3.4 ggplot2 Resources", " Chapter 3 Learning ggplot2 3.1 Getting Started Hopefully, most of you already have experiences in plotting basic R graphics. In this Chapter, you will be briefly introduced one of the most powerful plotting packages in R: ggplot2 with it’s basic grammar and functions. 3.2 Default Part: Layer Unlike other graphics packages, one of the remarkable advantages of ggplot2 is having an underlying grammar which enables you to compose graphs by combining different components. You can easily create novel graphics by adding ggplot2 functions to meet your needs based on your data. By definition of the grammar of graphics, the most important features are data and mapping in the layers and that’s where we are getting started. library(ggplot2) library(datasets) # Using &#39;iris&#39; in &#39;datasets&#39; library as data ggplot(data = datasets::iris) + #Data part geom_point(aes(Sepal.Length, Sepal.Width)) #Mapping part All plots are composed of the data, the information you want to visualize, and a mapping, the description of how the data’s variables are mapped to aesthetic attributes. Because data is independent from the other elements, a layered graphic can be built which utilizes different data sources while keeping the other components the same. That is to say, you can add several layers into the same ggplot. ggplot(data = datasets::iris) + #Data part geom_point(aes(Petal.Length, Petal.Width)) + #layer 1 with mapping geom_point(aes(Sepal.Length, Sepal.Width), color=&#39;red&#39;) #layer 2 with a different mapping 3.3 Customized Parts 3.3.1 Geometric object, Statistical transformation and Position adjustment Geometric object, Statistical transformation and Position adjustment are components that can be customized in each layer. Geometric objects geoms control the type of plot you create. Each geom can only display certain aesthetics or visual attributes of the geom. For example, a point geom has position, color, shape, and size aesthetics. You should first decide which kind of plot better explains the data before choosing geoms and use help function to check what aesthetics can be modified to achieve your desired effects. A statistical transformation stat transforms the data, generally by summarizing the information. And Position adjustment is applied when you need to adjust the position of elements on the plot for dense data, otherwise data points might obscure one another. ggplot(data = datasets::iris) + geom_histogram(mapping=aes(x=Petal.Length, fill=Species), stat = &#39;bin&#39;,position = &#39;stack&#39;) 3.3.2 Scale A scale controls how data is mapped to aesthetic attributes, so usually one scale for every aesthetic property employed in a layer. ggplot(data = datasets::iris) + geom_histogram(mapping=aes(x=Petal.Length, fill=Species), stat = &#39;bin&#39;,position = &#39;stack&#39;)+ scale_x_continuous(limits = c(0, 10)) + scale_y_continuous(limits = c(0, 50)) 3.3.3 Coordinate system A coordinate system coord maps the position of objects onto the plane of the plot, and controls how the axes and grid lines are drawn. One ggplot can only have one coord ggplot(data = datasets::iris) + geom_histogram(mapping=aes(x=Petal.Length, fill=Species), stat = &#39;bin&#39;,position = &#39;stack&#39;) + coord_polar() 3.3.4 Faceting Faceting can be used to split the data up into subsets of the entire dataset. ggplot(data = datasets::iris) + geom_histogram(mapping=aes(x=Petal.Length), stat = &#39;bin&#39;)+ facet_wrap(iris$Species) 3.3.5 Labels Labels include titles, labels for x,y axis and annotates. Good graphics also need to give clear information by using labels to tell readers’ of the background knowledge of your data. ggplot(data = datasets::iris) + geom_histogram(mapping=aes(x=Petal.Length, fill=Species), stat = &#39;bin&#39;,position = &#39;stack&#39;)+ ggtitle(&#39;Stacked Histogram on Petal Length of Different Species&#39;) + xlab(&#39;Length of Petal&#39;) 3.4 ggplot2 Resources For more implementations and examples, one easiest way is referring to the ggplot2 Cheatsheets provided by R. Follow the steps shown below and you can find the cheat-sheets in your RStudio. The cheat-sheets clearly list the basic components of a ggplot where you can customize your unique plot by choosing different functions. If you are seeking for more detailed explanations and examples with real datasets, here are some useful links for you: ggplot2: Elegant Graphics "],["unidimensional-continuous-variables.html", "Chapter 4 Unidimensional Continuous Variables 4.1 Histogram 4.2 Boxplot 4.3 Ridgeline plot 4.4 Normal Distribution", " Chapter 4 Unidimensional Continuous Variables In this chapter, we will demonstrate graphs with unidimensional continuous variables only using ggplot2. 4.1 Histogram 4.1.1 Basics and implications We will start with an easy example. library(ggplot2) library(gridExtra) #Example data x &lt;- c(50, 51, 53, 55, 56, 60, 65, 65, 68) #Stored as a dataframe df &lt;- data.frame(x) ggplot(df, aes(x)) + geom_histogram(color = &quot;blue&quot;, fill = &quot;lightBlue&quot;, binwidth = 5, center = 52.5) + ggtitle(&quot;ggplot2 histogram of x&quot;) In this example, we used geom_histogram to create a histogram on variable x. We can see that it is quick to make and does not need much pre-processing. Moreover, Histograms show data’s empirical distribution within a set of intervals and we suggest using it as a one of the first steps to understand your data. Note: as shown above, ggplot expects a dataframe, so make sure you do not throw a vector into ggplot. 4.1.2 Types of Histograms The y-scale of histograms can be represented in a variety of ways to express different results: Frequency or count: y = number of values that fall in each bin Relative frequency: y = number of values that fall in each bin / total number of values Cumulative frequency: y = total number of values &lt;= (or &lt;) right boundary of bin Density: y = relative frequency / binwidth 4.1.3 Parameters for geom_histogram 4.1.3.1 Bin boundaries Be mindful of the boundaries of the bins and whether a point will fall into the left or right bin if it is on a boundary. You can use the parameter closed to control the intervals. p1 &lt;- ggplot(df, aes(x)) + geom_histogram(color=&quot;blue&quot;,fill=&quot;lightblue&quot;, binwidth = 5, center = 52.5, closed=&quot;left&quot;) + ggtitle(&quot;Left Closed graph&quot;) p2 &lt;- ggplot(df, aes(x)) + geom_histogram(color=&quot;blue&quot;,fill=&quot;lightblue&quot;, binwidth = 5, center = 52.5, closed=&quot;right&quot;) + ggtitle(&quot;Right Closed graph&quot;) grid.arrange(p1, p2, ncol = 2) 4.1.3.2 Bin numbers library(Sleuth3) finches &lt;- Sleuth3::case0201 #Default / Only adding some styles to make graph consistent ggplot(finches, aes(x = Depth)) + geom_histogram(color=&quot;blue&quot;,fill=&quot;lightblue&quot;) + ggtitle(&quot;Default with pop-up about bin number&quot;) We start by passing no parameters into geom_histogram and you will notice a pop-up saying that the default number of bins is 30. We see that the graph is not ideal with some gaps. There are two ways to modify the number of bins: specify the width explicitly with binwidth or provide the desired number of bins with bins. Consider the following modifications: # using binwidth p3 &lt;- ggplot(finches, aes(x = Depth)) + geom_histogram(color=&quot;blue&quot;,fill=&quot;lightblue&quot;, binwidth = 0.5, boundary = 6) + ggtitle(&quot;Changed binwidth value&quot;) # using bins p4 &lt;- ggplot(finches, aes(x = Depth)) + geom_histogram(color=&quot;blue&quot;,fill=&quot;lightblue&quot;, bins = 15, boundary = 6) + ggtitle(&quot;Changed bin value&quot;) # format plot layout grid.arrange(p3, p4, ncol = 2) Note: There is no gold standard on the number of bins, so try different numbers to generate best results. 4.1.3.3 Bin alignment Consider this comparison p5 &lt;- ggplot(finches, aes(x = Depth)) + geom_histogram(color=&quot;blue&quot;,fill=&quot;lightblue&quot;,binwidth = 0.5) + ggtitle(&quot;Without alignment&quot;) p6 &lt;- ggplot(finches, aes(x = Depth)) + geom_histogram(color=&quot;blue&quot;,fill=&quot;lightblue&quot;,bins = 15, boundary = 6) + ggtitle(&quot;With alignment&quot;) grid.arrange(p5, p6, ncol = 2) Notice that the boundary of bins does not start at an axis and the only difference in the code is the removal of boundry. To control the position of bins, we can use either parameter center or boundary. You can use boundary to specify the endpoint of any bin or center to specify the center of any bin and ggplot2 will be able to calculate where to place the rest of the bins. (Also, notice that when the boundary was changed, the number of bins got smaller by one. This is because by default the bins are centered and go over/under the range of the data.) In the above example, we specify boundary to be 6. We can see the first bin starts at 6 and the position of other bins are calculated based on the binwidth 0.5. 4.1.4 Interactive histograms with ggvis The ggvis package is not currently in development, but does certain things very well, such as adjusting parameters of a histogram interactively while coding. If you are interested, refer here. 4.2 Boxplot 4.2.1 Single Boxplot A boxplot is one of the simplest ways of representing a distribution of a continuous variable (Never use boxplots for categorical data). It consists of two parts: box and whiskers. Let’s starting with a simple example: single boxplot. library(datasets) ggplot(Orange, aes(x=circumference))+ geom_boxplot()+ ggtitle(&quot;Boxplot of circumference&quot;) Here as you can see, boxplots provide a ton of information for a single chart. Boxplots tell you whether the variable is normally distributed, or if the distribution is skewed in either direction. You can also easily spot the outliers, which always helps. 4.2.2 Multiple boxplots Next, what if you want to compare the distributions between multiple classes? Here, you can create a multiple boxplot. But remember, your data frame needs to be tidy, that is you need to have a column with levels of the grouping variable. It can be be factor, character, or integer class. The following example still use the Orange dataset. We compare the distributions of circumference between different Tree(which indicates the tree types with ordering of max diameter). ggplot(Orange, aes(x=reorder(Tree, -circumference, median),y=circumference))+ geom_boxplot()+ ggtitle(&quot;Multiple boxplots of circumference of different types of Trees&quot;)+ labs(y=&quot;Circumference at Breast Height&quot;, x=&quot;Tree with ordering of max diameter&quot;) Note. Usually in a boxplot, the boxes should be reordered so that there will be a decreasing order of the class medians from left to right. Often you want boxplots to be horizontal. Super easy to do in ggplot2: just tack on + coord_flip() and remove the - from the reordering so that the factor level with the highest median will be on top: ggplot(Orange, aes(x=reorder(Tree, circumference, median),y=circumference))+ geom_boxplot()+ coord_flip()+ ggtitle(&quot;Multiple boxplots of circumference of different types of Trees&quot;)+ labs(y=&quot;Circumference at Breast Height&quot;, x=&quot;Tree with ordering of max diameter&quot;) 4.3 Ridgeline plot 4.3.1 Basics and implications Ridgeline plots can be used when a number of data segments have to be plotted on the same horizontal scale. It is presented with slight overlap. Ridgeline plots are very useful to visualize the distribution of a categorical variable over time or space. A good example using ridgeline plots will be a great example is visualizing the distribution of salary over different departments in a company. Consider the following example: library(ggridges) library(forcats) ggplot(Orange, aes(x=circumference,y=fct_rev(fct_inorder(Tree)),fill = fct_inorder(Tree))) + geom_density_ridges() + scale_fill_brewer(palette = 4) + scale_y_discrete(expand = c(0.8, 0)) + scale_x_continuous(expand = c(0.01, 0)) + ggtitle(&quot;Density estimation of circumference of different types of Trees&quot;) + labs(x=&quot;Circumference at Breast Height&quot;, y=&quot;Tree with ordering of max diameter&quot;) + theme_ridges() + theme(plot.title = element_text(hjust = 0.5), axis.title.x = element_text(hjust=0.5), legend.title = element_blank()) ggridge uses two main geoms to plot the ridgeline density plots: geom_density_ridges and geom_ridgeline. They are used to plot the densities of categorical variable factors and see their distribution over a continuous scale. 4.3.2 Create better visuals ggplot(Orange, aes(x=circumference,y=fct_rev(fct_inorder(Tree)),fill = fct_inorder(Tree))) + geom_density_ridges(scale = 2, alpha=0.5) + scale_fill_brewer(palette = 4) + scale_y_discrete(expand = c(0.8, 0)) + scale_x_continuous(expand = c(0.01, 0)) + ggtitle(&quot;Density estimation of circumference of different types of Trees&quot;) + labs(x=&quot;Circumference at Breast Height&quot;, y=&quot;Tree with ordering of max diameter&quot;) + theme_ridges() + theme(plot.title = element_text(hjust = 0.5), axis.title.x = element_text(hjust=0.5), legend.title = element_blank()) In this example, we added parameter scale and alpha to control overlaps between ridges. Scale defines how much the peak of the lower curve touches the curve above and alpha controls transparency. 4.3.3 Additional Resources Introduction to ggridges: An excellent collection of code examples on how to make ridgeline plots with ggplot2. Covers every parameter of ggridges and how to modify them for better visualization. If you want a ridgeline plot to look a certain way, this article will help. Article on ridgeline plots with ggplot2: Few examples using different examples. Great for starting with ridgeline plots. History of Ridgeline plots: To refer to the theory of ridgeline plots. 4.4 Normal Distribution When encountering data that seems to be normally distributed, you may want to overlay a normal curve. There are many ways to draw a normal curve and we introduce one here ggplot(finches, aes(x = Depth)) + geom_histogram(aes(y=..density..),color=&quot;blue&quot;,fill=&quot;lightblue&quot;, binwidth = 0.5) + stat_function(fun=dnorm, col = &quot;red&quot;, args=list(mean(finches$Depth),sd(finches$Depth)))+ ggtitle(&quot;Normal curve overlaid&quot;) Notice that the normal curve is not compatiable with facet. Consider the following example As you might notice, even though a normal curve appears in all of the sections, they are actually the same one and generated on the whole dataset. In such circumstance, we suggest drawing each graph separately and combine them. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
